name: "Coverity tools for local analysis"
description: "Will download the given version of Coverity Analysis tools from given Coverity Connect and extract them into given folder. Will also add Coverity analysis tools into current runner PATH"
author: Jouni Lehto
branding:
  icon: shield
  color: blue
inputs:
  log_level:
    description: Logging level
    default: DEBUG
    required: false
  project:
    description: Project name in Coverity Connect, if not given then default=github.repository
    required: false
    default: ${{github.repository}}
  stream:
    description: Project stream name in Coverity Connect, if not given then default=github.ref_name
    required: false
    default: ${{github.ref_name}}
  cov_version:
    description: "What version of Coverity Analysis is needed, example: cov-analysis-linux64-2022.6.1"
    default: cov-analysis-linux64-2022.6.1
    required: false
  cov_url:
    description: URL for Coverity Connect where the analysis tar file can be downloaded
    required: true
  cov_username:
    description: Coverity Connect username
    required: true
  cov_password:
    description: Coverity Connect password
    required: true
  cov_license:
    description: License content from secrets.COVERITY_LICENSE. License is needed for analysis. If license content is not given, then the license.dat will be downloaded from the Coverity Connect Downloads.
    required: false
  cov_install_folder:
    description: To which folder the tools are extracted
    required: false
    default: /tmp/cache/coverity
  cov_remove_folders:
    description: With this you can give space separated list of folders which you will not need from Coverity Analysis and that way safe some space. (by default are removed architecture-analysis sdk dynamic-analysis forcheck doc)
    required: false
    default: architecture-analysis sdk dynamic-analysis forcheck doc
  cov_configures:
    description: With this you can configure Coverity Analysis. (by default cov-configure --java && cov-configure --javascript && cov-configure --python && cov-configure --kotlin && cov-configure --gcc --xml-option=prepend_arg:--ppp_translator --xml-option=prepend_arg:"replace/#\s*error \"Do not include _sd-common.h directly; it is a private header.\"/" && cov-configure --template --compiler c++ --comptype gcc && cov-configure --template --compiler cc --comptype gcc)
    required: false
    default: cov-configure --java && cov-configure --javascript && cov-configure --python && cov-configure --kotlin && cov-configure --gcc --xml-option=prepend_arg:--ppp_translator --xml-option=prepend_arg:"replace/#\s*error \"Do not include _sd-common.h directly; it is a private header.\"/" && cov-configure --template --compiler c++ --comptype gcc && cov-configure --template --compiler cc --comptype gcc
  cov_intermediate_dir:
    description: Intermediate directory
    required: false
    default: ${{github.workspace}}/idir
  cov_output_format:
    description: With this you can specify that do you want to have output as a json, sarif or html format. If not given, then no output file created. Options are json, sarif or html.
    required: false
  cov_output:
    description: What is wanted as an output. Html case, output must be folder with fullpath where you want to html report to be created, json case outoput must be json file with full path and sarif case it must be sarif file with full path.
    required: false
  cache: 
    description: Coverity tools and Intermediate directory can be cached. Options coverity, idir and all. Coverity will only cache Coverity tools, idir will cache only intermediate dir and all will cache both.
    required: false
  create_if_not_exists:
    description: Create project and stream if they do not exists
    required: false
    default: false

runs:
  using: composite
  steps:
    # Set project and stream name as environmental params and replace special characters /%& and space to _
    # Project name can be found like ${{env.project}} and stream like ${{env.stream}}
    - name: Set Project and Stream names into env
      run: |
        origin_name=${{inputs.project}}
        project_name=${origin_name//[\/ %&]/-}
        echo "project=$project_name" >> $GITHUB_ENV
        origin_stream_name=${{inputs.stream}}
        stream_name=${origin_stream_name//[\/ %&]/-}
        echo "stream=$project_name-$stream_name" >> $GITHUB_ENV
      shell: bash
    # Testing is project and stream exists
    - if: ${{inputs.create_if_not_exists}}
      run: |
        pip3 install requests
        python3 ${{github.action_path}}/coverityProjectStreamChecker.py --coverity_url=${{inputs.cov_url}} --project_name=${{env.project}} --stream_name=${{env.stream}} --username=${{inputs.cov_username}} --password=${{inputs.cov_password}} --log_level=${{inputs.log_level}}
      shell: bash
    - if: ${{inputs.cache == 'idir' || inputs.cache == 'all'}}
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      shell: bash
    - if: ${{inputs.cache == 'coverity' || inputs.cache == 'all'}}
      id: cache-coverity-tools
      uses: actions/cache@v3
      with:
        path: ${{inputs.cov_install_folder}}
        key: cache-coverity-tools-${{ inputs.cov_version }} #Cache is for cov_version
    - if: ${{inputs.cache == 'idir' || inputs.cache == 'all'}}
      id: cache-coverity-idir
      uses: actions/cache@v3
      with:
        path: ${{inputs.cov_intermediate_dir}}
        key: cache-coverity-idir-${{env.project}}-${{env.stream}}-${{ steps.get-date.outputs.date }} #Cache is for 1 day
    # Download the Coverity Analysis tar -file and extract it and remove not needed folders to minimize the needed space.
    - if: steps.cache-coverity-tools.outputs.cache-hit != 'true'
      run: |
        : #Get Coverity Analysis tools from Coverity server and extract them and remove tools which are not needed
        mkdir -p ${{inputs.cov_install_folder}}
        curl --user ${{inputs.cov_username}}:"${{inputs.cov_password}}" -f -o ${{inputs.cov_install_folder}}/${{inputs.cov_version}}.tar.gz ${{inputs.cov_url}}/downloadFile.htm?fn=${{inputs.cov_version}}.tar.gz
        cd ${{inputs.cov_install_folder}} && tar -xf ${{inputs.cov_version}}.tar.gz && rm -rf ${{inputs.cov_version}}.tar.gz
        cd ${{inputs.cov_version}} && rm -rf ${{inputs.cov_remove_folders}}
        if [ -z ${{inputs.cov_license}} ]
        then 
          curl --user ${{inputs.cov_username}}:"${{inputs.cov_password}}" -f -o ${{inputs.cov_install_folder}}/${{inputs.cov_version}}/bin/license.dat ${{inputs.cov_url}}/downloadFile.htm?fn=license.dat
        else
          echo -e "${{inputs.cov_license}}" > ${{inputs.cov_install_folder}}/${{inputs.cov_version}}/bin/license.dat
        fi
      shell: bash
    # Add coverity bin -folder into runners PATH
    - run: echo "${{inputs.cov_install_folder}}/${{inputs.cov_version}}/bin" >> $GITHUB_PATH
      shell: bash
    - if: steps.cache-coverity-idir.outputs.cache-hit == 'true'
      run: |
        cov-manage-emit --dir ${{inputs.cov_intermediate_dir}} reset-host-name
      shell: bash
    - name: Set other env variables
      run: |
        echo "cov_url=${{inputs.cov_url}}" >> $GITHUB_ENV
        echo "cov_username=${{inputs.cov_username}}" >> $GITHUB_ENV
        echo "cov_password=${{inputs.cov_password}}" >> $GITHUB_ENV
        echo "cov_install_folder=${{inputs.cov_install_folder}}" >> $GITHUB_ENV
        echo "cov_intermediate_dir=${{inputs.cov_intermediate_dir}}" >> $GITHUB_ENV
        echo "cov_output_format=${{inputs.cov_output_format}}" >> $GITHUB_ENV
        echo "cov_output=${{inputs.cov_output}}" >> $GITHUB_ENV
      shell: bash
    # Run Coverity configures.
    - if: ${{inputs.cov_configures != ''}}
      run: ${{inputs.cov_configures}}
      shell: bash
    - name: Archive scanning results
      uses: actions/upload-artifact@v3
      with:
        name: license_file
        path: ${{inputs.cov_install_folder}}/${{inputs.cov_version}}/bin/license.dat
      continue-on-error: true
